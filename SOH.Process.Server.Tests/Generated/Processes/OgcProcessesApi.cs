//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using FluentValidation.Results;
using NetTopologySuite.Features;
using System.Net;
using Microsoft.AspNetCore.Mvc;
using SOH.Process.Server.Models.Common;
using SOH.Process.Server.Models.Common.Exceptions;
using SOH.Process.Server.Models.Ogc;
using SOH.Process.Server.Models.Parameters;
using SOH.Process.Server.Models.Processes;
using static SOH.Process.Server.Generated.OgcProcessesApiExtensions;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"

namespace SOH.Process.Server.Generated
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ICapabilitiesClient : SOH.Process.Server.Generated.IApiService
    {
        /// <summary>
        /// landing page of this API.
        /// </summary>
        /// <remarks>
        /// The landing page provides links to the:   * The APIDefinition (no fixed path),   * The Conformance statements
        /// <br/>(path /conformance),   * The processes metadata (path /processes),   * The endpoint for job monitoring (path
        /// <br/>/jobs).  For more information, see [Section 7.2](https://docs.ogc.org/is/18-062/18-062.html#sc_landing_page).
        /// </remarks>
        /// <returns>The landing page provides links to the API definition (link relations &amp;#x60;service-desc&amp;#x60; and &amp;#x60;service-doc&amp;#x60;), the Conformance declaration (path &amp;#x60;/conformance&amp;#x60;, link relation &amp;#x60;http://www.opengis.net/def/rel/ogc/1.0/conformance&amp;#x60;), and to other resources.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LandingPage> GetLandingPageAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// landing page of this API.
        /// </summary>
        /// <remarks>
        /// The landing page provides links to the:   * The APIDefinition (no fixed path),   * The Conformance statements
        /// <br/>(path /conformance),   * The processes metadata (path /processes),   * The endpoint for job monitoring (path
        /// <br/>/jobs).  For more information, see [Section 7.2](https://docs.ogc.org/is/18-062/18-062.html#sc_landing_page).
        /// </remarks>
        /// <returns>The landing page provides links to the API definition (link relations &amp;#x60;service-desc&amp;#x60; and &amp;#x60;service-doc&amp;#x60;), the Conformance declaration (path &amp;#x60;/conformance&amp;#x60;, link relation &amp;#x60;http://www.opengis.net/def/rel/ogc/1.0/conformance&amp;#x60;), and to other resources.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LandingPage> GetLandingPageAsync(System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CapabilitiesClient : SOH.Process.Server.Generated.AbstractTheraflowClient, ICapabilitiesClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);

        public CapabilitiesClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  });
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// landing page of this API.
        /// </summary>
        /// <remarks>
        /// The landing page provides links to the:   * The APIDefinition (no fixed path),   * The Conformance statements
        /// <br/>(path /conformance),   * The processes metadata (path /processes),   * The endpoint for job monitoring (path
        /// <br/>/jobs).  For more information, see [Section 7.2](https://docs.ogc.org/is/18-062/18-062.html#sc_landing_page).
        /// </remarks>
        /// <returns>The landing page provides links to the API definition (link relations &amp;#x60;service-desc&amp;#x60; and &amp;#x60;service-doc&amp;#x60;), the Conformance declaration (path &amp;#x60;/conformance&amp;#x60;, link relation &amp;#x60;http://www.opengis.net/def/rel/ogc/1.0/conformance&amp;#x60;), and to other resources.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<LandingPage> GetLandingPageAsync()
        {
            return GetLandingPageAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// landing page of this API.
        /// </summary>
        /// <remarks>
        /// The landing page provides links to the:   * The APIDefinition (no fixed path),   * The Conformance statements
        /// <br/>(path /conformance),   * The processes metadata (path /processes),   * The endpoint for job monitoring (path
        /// <br/>/jobs).  For more information, see [Section 7.2](https://docs.ogc.org/is/18-062/18-062.html#sc_landing_page).
        /// </remarks>
        /// <returns>The landing page provides links to the API definition (link relations &amp;#x60;service-desc&amp;#x60; and &amp;#x60;service-doc&amp;#x60;), the Conformance declaration (path &amp;#x60;/conformance&amp;#x60;, link relation &amp;#x60;http://www.opengis.net/def/rel/ogc/1.0/conformance&amp;#x60;), and to other resources.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<LandingPage> GetLandingPageAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: ""

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LandingPage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("A server error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IConformanceClient : SOH.Process.Server.Generated.IApiService
    {
        /// <summary>
        /// information about standards that this API conforms to.
        /// </summary>
        /// <remarks>
        /// A list of all conformance classes, specified in a standard, that the server conforms to.  | Conformance class
        /// <br/>| URI | |- -- -- -- -- --|- -- -- --| |Core|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/core| |OGC
        /// <br/>Process Description|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/ogc-process-description|
        /// <br/>|JSON|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/json|
        /// <br/>|HTML|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/html| |OpenAPI Specification
        /// <br/>3.0|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/oas30| |Job
        /// <br/>list|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/job-list|
        /// <br/>|Callback|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/callback|
        /// <br/>|Dismiss|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/dismiss|  For more information, see [Section
        /// <br/>7.4](https://docs.ogc.org/is/18-062/18-062.html#sc_conformance_classes).
        /// </remarks>
        /// <returns>The URIs of all conformance classes supported by the server.  To support generic clients that want to access multiple OGC API - Processes implementations - and not just a specific API / server, the server declares the conformance classes it implements and conforms to.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ConfClasses> GetConformanceClassesAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// information about standards that this API conforms to.
        /// </summary>
        /// <remarks>
        /// A list of all conformance classes, specified in a standard, that the server conforms to.  | Conformance class
        /// <br/>| URI | |- -- -- -- -- --|- -- -- --| |Core|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/core| |OGC
        /// <br/>Process Description|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/ogc-process-description|
        /// <br/>|JSON|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/json|
        /// <br/>|HTML|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/html| |OpenAPI Specification
        /// <br/>3.0|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/oas30| |Job
        /// <br/>list|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/job-list|
        /// <br/>|Callback|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/callback|
        /// <br/>|Dismiss|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/dismiss|  For more information, see [Section
        /// <br/>7.4](https://docs.ogc.org/is/18-062/18-062.html#sc_conformance_classes).
        /// </remarks>
        /// <returns>The URIs of all conformance classes supported by the server.  To support generic clients that want to access multiple OGC API - Processes implementations - and not just a specific API / server, the server declares the conformance classes it implements and conforms to.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ConfClasses> GetConformanceClassesAsync(System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConformanceClient : SOH.Process.Server.Generated.AbstractTheraflowClient, IConformanceClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);

        public ConformanceClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  });
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// information about standards that this API conforms to.
        /// </summary>
        /// <remarks>
        /// A list of all conformance classes, specified in a standard, that the server conforms to.  | Conformance class
        /// <br/>| URI | |- -- -- -- -- --|- -- -- --| |Core|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/core| |OGC
        /// <br/>Process Description|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/ogc-process-description|
        /// <br/>|JSON|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/json|
        /// <br/>|HTML|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/html| |OpenAPI Specification
        /// <br/>3.0|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/oas30| |Job
        /// <br/>list|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/job-list|
        /// <br/>|Callback|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/callback|
        /// <br/>|Dismiss|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/dismiss|  For more information, see [Section
        /// <br/>7.4](https://docs.ogc.org/is/18-062/18-062.html#sc_conformance_classes).
        /// </remarks>
        /// <returns>The URIs of all conformance classes supported by the server.  To support generic clients that want to access multiple OGC API - Processes implementations - and not just a specific API / server, the server declares the conformance classes it implements and conforms to.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ConfClasses> GetConformanceClassesAsync()
        {
            return GetConformanceClassesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// information about standards that this API conforms to.
        /// </summary>
        /// <remarks>
        /// A list of all conformance classes, specified in a standard, that the server conforms to.  | Conformance class
        /// <br/>| URI | |- -- -- -- -- --|- -- -- --| |Core|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/core| |OGC
        /// <br/>Process Description|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/ogc-process-description|
        /// <br/>|JSON|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/json|
        /// <br/>|HTML|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/html| |OpenAPI Specification
        /// <br/>3.0|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/oas30| |Job
        /// <br/>list|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/job-list|
        /// <br/>|Callback|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/callback|
        /// <br/>|Dismiss|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/dismiss|  For more information, see [Section
        /// <br/>7.4](https://docs.ogc.org/is/18-062/18-062.html#sc_conformance_classes).
        /// </remarks>
        /// <returns>The URIs of all conformance classes supported by the server.  To support generic clients that want to access multiple OGC API - Processes implementations - and not just a specific API / server, the server declares the conformance classes it implements and conforms to.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ConfClasses> GetConformanceClassesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "conformance"
                    urlBuilder_.Append("conformance");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ConfClasses>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("A server error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IJobsClient : SOH.Process.Server.Generated.IApiService
    {
        /// <summary>
        /// retrieve the list of jobs.
        /// </summary>
        /// <remarks>
        /// Lists available jobs.  For more information, see [Section
        /// <br/>11](https://docs.ogc.org/is/18-062/18-062.html#sc_job_list).
        /// </remarks>
        /// <returns>A list of jobs for this process.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<JobList> GetJobsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// retrieve the list of jobs.
        /// </summary>
        /// <remarks>
        /// Lists available jobs.  For more information, see [Section
        /// <br/>11](https://docs.ogc.org/is/18-062/18-062.html#sc_job_list).
        /// </remarks>
        /// <returns>A list of jobs for this process.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<JobList> GetJobsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// retrieve the status of a job.
        /// </summary>
        /// <remarks>
        /// Shows the status of a job.   For more information, see [Section
        /// <br/>7.12](https://docs.ogc.org/is/18-062/18-062.html#sc_retrieve_status_info).
        /// </remarks>
        /// <param name="jobId">local identifier of a job.</param>
        /// <returns>The status of a job.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StatusInfo> GetStatusAsync(string jobId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// retrieve the status of a job.
        /// </summary>
        /// <remarks>
        /// Shows the status of a job.   For more information, see [Section
        /// <br/>7.12](https://docs.ogc.org/is/18-062/18-062.html#sc_retrieve_status_info).
        /// </remarks>
        /// <param name="jobId">local identifier of a job.</param>
        /// <returns>The status of a job.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StatusInfo> GetStatusAsync(string jobId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// cancel a job execution, remove a finished job.
        /// </summary>
        /// <remarks>
        /// Cancel a job execution and remove it from the jobs list.  For more information, see [Section
        /// <br/>13](https://docs.ogc.org/is/18-062/18-062.html#Dismiss).
        /// </remarks>
        /// <param name="jobId">local identifier of a job.</param>
        /// <returns>The status of a job.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StatusInfo> DismissAsync(string jobId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// cancel a job execution, remove a finished job.
        /// </summary>
        /// <remarks>
        /// Cancel a job execution and remove it from the jobs list.  For more information, see [Section
        /// <br/>13](https://docs.ogc.org/is/18-062/18-062.html#Dismiss).
        /// </remarks>
        /// <param name="jobId">local identifier of a job.</param>
        /// <returns>The status of a job.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StatusInfo> DismissAsync(string jobId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// retrieve the result(s) of a job.
        /// </summary>
        /// <remarks>
        /// Lists available results of a job. In case of a failure, lists exceptions instead.  For more information, see
        /// <br/>[Section 7.13](https://docs.ogc.org/is/18-062/18-062.html#sc_retrieve_job_results).
        /// </remarks>
        /// <param name="jobId">local identifier of a job.</param>
        /// <returns>The results of a job.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, object>> GetResultAsync(string jobId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// retrieve the result(s) of a job.
        /// </summary>
        /// <remarks>
        /// Lists available results of a job. In case of a failure, lists exceptions instead.  For more information, see
        /// <br/>[Section 7.13](https://docs.ogc.org/is/18-062/18-062.html#sc_retrieve_job_results).
        /// </remarks>
        /// <param name="jobId">local identifier of a job.</param>
        /// <returns>The results of a job.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, object>> GetResultAsync(string jobId, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JobsClient : SOH.Process.Server.Generated.AbstractTheraflowClient, IJobsClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);

        public JobsClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  });
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// retrieve the list of jobs.
        /// </summary>
        /// <remarks>
        /// Lists available jobs.  For more information, see [Section
        /// <br/>11](https://docs.ogc.org/is/18-062/18-062.html#sc_job_list).
        /// </remarks>
        /// <returns>A list of jobs for this process.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<JobList> GetJobsAsync()
        {
            return GetJobsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// retrieve the list of jobs.
        /// </summary>
        /// <remarks>
        /// Lists available jobs.  For more information, see [Section
        /// <br/>11](https://docs.ogc.org/is/18-062/18-062.html#sc_job_list).
        /// </remarks>
        /// <returns>A list of jobs for this process.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<JobList> GetJobsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "jobs"
                    urlBuilder_.Append("jobs");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<JobList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("The requested URI was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// retrieve the status of a job.
        /// </summary>
        /// <remarks>
        /// Shows the status of a job.   For more information, see [Section
        /// <br/>7.12](https://docs.ogc.org/is/18-062/18-062.html#sc_retrieve_status_info).
        /// </remarks>
        /// <param name="jobId">local identifier of a job.</param>
        /// <returns>The status of a job.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<StatusInfo> GetStatusAsync(string jobId)
        {
            return GetStatusAsync(jobId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// retrieve the status of a job.
        /// </summary>
        /// <remarks>
        /// Shows the status of a job.   For more information, see [Section
        /// <br/>7.12](https://docs.ogc.org/is/18-062/18-062.html#sc_retrieve_status_info).
        /// </remarks>
        /// <param name="jobId">local identifier of a job.</param>
        /// <returns>The status of a job.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<StatusInfo> GetStatusAsync(string jobId, System.Threading.CancellationToken cancellationToken)
        {
            if (jobId == null)
                throw new System.ArgumentNullException("jobId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "jobs/{jobId}"
                    urlBuilder_.Append("jobs/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(jobId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StatusInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("The requested URI was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("A server error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// cancel a job execution, remove a finished job.
        /// </summary>
        /// <remarks>
        /// Cancel a job execution and remove it from the jobs list.  For more information, see [Section
        /// <br/>13](https://docs.ogc.org/is/18-062/18-062.html#Dismiss).
        /// </remarks>
        /// <param name="jobId">local identifier of a job.</param>
        /// <returns>The status of a job.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<StatusInfo> DismissAsync(string jobId)
        {
            return DismissAsync(jobId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// cancel a job execution, remove a finished job.
        /// </summary>
        /// <remarks>
        /// Cancel a job execution and remove it from the jobs list.  For more information, see [Section
        /// <br/>13](https://docs.ogc.org/is/18-062/18-062.html#Dismiss).
        /// </remarks>
        /// <param name="jobId">local identifier of a job.</param>
        /// <returns>The status of a job.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<StatusInfo> DismissAsync(string jobId, System.Threading.CancellationToken cancellationToken)
        {
            if (jobId == null)
                throw new System.ArgumentNullException("jobId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "jobs/{jobId}"
                    urlBuilder_.Append("jobs/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(jobId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StatusInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("The requested URI was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("A server error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// retrieve the result(s) of a job.
        /// </summary>
        /// <remarks>
        /// Lists available results of a job. In case of a failure, lists exceptions instead.  For more information, see
        /// <br/>[Section 7.13](https://docs.ogc.org/is/18-062/18-062.html#sc_retrieve_job_results).
        /// </remarks>
        /// <param name="jobId">local identifier of a job.</param>
        /// <returns>The results of a job.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, object>> GetResultAsync(string jobId)
        {
            return GetResultAsync(jobId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// retrieve the result(s) of a job.
        /// </summary>
        /// <remarks>
        /// Lists available results of a job. In case of a failure, lists exceptions instead.  For more information, see
        /// <br/>[Section 7.13](https://docs.ogc.org/is/18-062/18-062.html#sc_retrieve_job_results).
        /// </remarks>
        /// <param name="jobId">local identifier of a job.</param>
        /// <returns>The results of a job.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, object>> GetResultAsync(string jobId, System.Threading.CancellationToken cancellationToken)
        {
            if (jobId == null)
                throw new System.ArgumentNullException("jobId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "jobs/{jobId}/results"
                    urlBuilder_.Append("jobs/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(jobId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/results");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IDictionary<string, object>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("The requested URI was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("A server error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IProcessesClient : SOH.Process.Server.Generated.IApiService
    {
        /// <summary>
        /// retrieve the list of available processes.
        /// </summary>
        /// <remarks>
        /// The list of processes contains a summary of each process the OGC API - Processes offers, including the link to
        /// <br/>a more detailed description of the process.  For more information, see [Section
        /// <br/>7.9](https://docs.ogc.org/is/18-062/18-062.html#sc_process_list).
        /// </remarks>
        /// <returns>Information about the available processes</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProcessList> GetProcessesAsync(int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// retrieve the list of available processes.
        /// </summary>
        /// <remarks>
        /// The list of processes contains a summary of each process the OGC API - Processes offers, including the link to
        /// <br/>a more detailed description of the process.  For more information, see [Section
        /// <br/>7.9](https://docs.ogc.org/is/18-062/18-062.html#sc_process_list).
        /// </remarks>
        /// <returns>Information about the available processes</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProcessList> GetProcessesAsync(int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Retrieves a process description by ID.
        /// </summary>
        /// <remarks>
        /// The process description contains information about inputs and outputs and a link to the execution-endpoint for
        /// <br/>the process. The Core does not mandate the use of a specific process description to specify the interface of a
        /// <br/>process. That said, the Core requirements class makes the following recommendation:  Implementations SHOULD
        /// <br/>consider supporting the OGC process description.  For more information, see [Section
        /// <br/>7.10](https://docs.ogc.org/is/18-062/18-062.html#sc_process_description).
        /// </remarks>
        /// <returns>A process description.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProcessDescription> GetProcessDescriptionAsync(string processId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a process description by ID.
        /// </summary>
        /// <remarks>
        /// The process description contains information about inputs and outputs and a link to the execution-endpoint for
        /// <br/>the process. The Core does not mandate the use of a specific process description to specify the interface of a
        /// <br/>process. That said, the Core requirements class makes the following recommendation:  Implementations SHOULD
        /// <br/>consider supporting the OGC process description.  For more information, see [Section
        /// <br/>7.10](https://docs.ogc.org/is/18-062/18-062.html#sc_process_description).
        /// </remarks>
        /// <returns>A process description.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProcessDescription> GetProcessDescriptionAsync(string processId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// execute a process.
        /// </summary>
        /// <remarks>
        /// Create a new job.  For more information, see [Section
        /// <br/>7.11](https://docs.ogc.org/is/18-062/18-062.html#sc_create_job).
        /// </remarks>
        /// <param name="processId">The process to start.</param>
        /// <param name="request">Mandatory execute request JSON.</param>
        /// <returns>Result of synchronous execution</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Result> ExecuteAsync(string processId, Execute request);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// execute a process.
        /// </summary>
        /// <remarks>
        /// Create a new job.  For more information, see [Section
        /// <br/>7.11](https://docs.ogc.org/is/18-062/18-062.html#sc_create_job).
        /// </remarks>
        /// <param name="processId">The process to start.</param>
        /// <param name="request">Mandatory execute request JSON.</param>
        /// <returns>Result of synchronous execution</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Result> ExecuteAsync(string processId, Execute request, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProcessesClient : SOH.Process.Server.Generated.AbstractTheraflowClient, IProcessesClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);

        public ProcessesClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  });
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// retrieve the list of available processes.
        /// </summary>
        /// <remarks>
        /// The list of processes contains a summary of each process the OGC API - Processes offers, including the link to
        /// <br/>a more detailed description of the process.  For more information, see [Section
        /// <br/>7.9](https://docs.ogc.org/is/18-062/18-062.html#sc_process_list).
        /// </remarks>
        /// <returns>Information about the available processes</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ProcessList> GetProcessesAsync(int? limit)
        {
            return GetProcessesAsync(limit, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// retrieve the list of available processes.
        /// </summary>
        /// <remarks>
        /// The list of processes contains a summary of each process the OGC API - Processes offers, including the link to
        /// <br/>a more detailed description of the process.  For more information, see [Section
        /// <br/>7.9](https://docs.ogc.org/is/18-062/18-062.html#sc_process_list).
        /// </remarks>
        /// <returns>Information about the available processes</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProcessList> GetProcessesAsync(int? limit, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "processes"
                    urlBuilder_.Append("processes");
            urlBuilder_.Append('?');
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
            }
            urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProcessList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Retrieves a process description by ID.
        /// </summary>
        /// <remarks>
        /// The process description contains information about inputs and outputs and a link to the execution-endpoint for
        /// <br/>the process. The Core does not mandate the use of a specific process description to specify the interface of a
        /// <br/>process. That said, the Core requirements class makes the following recommendation:  Implementations SHOULD
        /// <br/>consider supporting the OGC process description.  For more information, see [Section
        /// <br/>7.10](https://docs.ogc.org/is/18-062/18-062.html#sc_process_description).
        /// </remarks>
        /// <returns>A process description.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ProcessDescription> GetProcessDescriptionAsync(string processId)
        {
            return GetProcessDescriptionAsync(processId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a process description by ID.
        /// </summary>
        /// <remarks>
        /// The process description contains information about inputs and outputs and a link to the execution-endpoint for
        /// <br/>the process. The Core does not mandate the use of a specific process description to specify the interface of a
        /// <br/>process. That said, the Core requirements class makes the following recommendation:  Implementations SHOULD
        /// <br/>consider supporting the OGC process description.  For more information, see [Section
        /// <br/>7.10](https://docs.ogc.org/is/18-062/18-062.html#sc_process_description).
        /// </remarks>
        /// <returns>A process description.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProcessDescription> GetProcessDescriptionAsync(string processId, System.Threading.CancellationToken cancellationToken)
        {
            if (processId == null)
                throw new System.ArgumentNullException("processId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "processes/{processId}"
                    urlBuilder_.Append("processes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(processId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProcessDescription>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("The requested URI was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// execute a process.
        /// </summary>
        /// <remarks>
        /// Create a new job.  For more information, see [Section
        /// <br/>7.11](https://docs.ogc.org/is/18-062/18-062.html#sc_create_job).
        /// </remarks>
        /// <param name="processId">The process to start.</param>
        /// <param name="request">Mandatory execute request JSON.</param>
        /// <returns>Result of synchronous execution</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Result> ExecuteAsync(string processId, Execute request)
        {
            return ExecuteAsync(processId, request, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// execute a process.
        /// </summary>
        /// <remarks>
        /// Create a new job.  For more information, see [Section
        /// <br/>7.11](https://docs.ogc.org/is/18-062/18-062.html#sc_create_job).
        /// </remarks>
        /// <param name="processId">The process to start.</param>
        /// <param name="request">Mandatory execute request JSON.</param>
        /// <returns>Result of synchronous execution</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Result> ExecuteAsync(string processId, Execute request, System.Threading.CancellationToken cancellationToken)
        {
            if (processId == null)
                throw new System.ArgumentNullException("processId");

            if (request == null)
                throw new System.ArgumentNullException("request");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "processes/{processId}/execution"
                    urlBuilder_.Append("processes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(processId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/execution");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Result>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StatusInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<StatusInfo>("Started asynchronous execution. Created job.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("The requested URI was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("A server error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LandingPage
    {
        /// <summary>
        /// Gets or Sets Title.
        /// <br/>            
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Title { get; set; } = default!;

        /// <summary>
        /// Gets or Sets Description.
        /// <br/>            
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// Gets or Sets Links.
        /// <br/>            
        /// </summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Link> Links { get; set; } = new System.Collections.ObjectModel.Collection<Link>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }
        public static LandingPage FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LandingPage>(data, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Link
    {
        /// <summary>
        /// Gets or Sets Href.
        /// <br/>            
        /// </summary>
        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Href { get; set; } = default!;

        /// <summary>
        /// Gets or Sets Rel.
        /// <br/>            
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Rel { get; set; } = default!;

        /// <summary>
        /// Gets or Sets Type.
        /// <br/>            
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; } = default!;

        /// <summary>
        /// Gets or Sets Hreflang.
        /// <br/>            
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hreflang", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Hreflang { get; set; } = default!;

        /// <summary>
        /// Gets or Sets Title.
        /// <br/>            
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Title { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }
        public static Link FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Link>(data, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConfClasses
    {
        /// <summary>
        /// Gets or Sets ConformsTo.
        /// <br/>            
        /// </summary>
        [Newtonsoft.Json.JsonProperty("conformsTo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> ConformsTo { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }
        public static ConfClasses FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConfClasses>(data, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JobList
    {
        /// <summary>
        /// Gets or Sets Jobs.
        /// <br/>            
        /// </summary>
        [Newtonsoft.Json.JsonProperty("jobs", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<StatusInfo> Jobs { get; set; } = new System.Collections.ObjectModel.Collection<StatusInfo>();

        /// <summary>
        /// Gets or Sets Links.
        /// <br/>            
        /// </summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Link> Links { get; set; } = new System.Collections.ObjectModel.Collection<Link>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }
        public static JobList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<JobList>(data, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }

    }

    /// <summary>
    /// Gets or Sets Type.
    /// <br/>            
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProcessingKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"process")]
        ProcessEnum = 0,

    }

    /// <summary>
    /// Gets or Sets statusCode.
    /// <br/>            
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum StatusCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"accepted")]
        Accepted = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"running")]
        Running = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"successful")]
        Successful = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"failed")]
        Failed = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"dismissed")]
        Dismissed = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProcessSummary
    {
        /// <summary>
        /// The unique identifier of this process.
        /// <br/>            
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Gets or sets the title to display.
        /// <br/>            
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Title { get; set; } = default!;

        /// <summary>
        /// An optional description of this element to present.
        /// <br/>            
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// A list of special keywords.
        /// <br/>            
        /// </summary>
        [Newtonsoft.Json.JsonProperty("keywords", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Keywords { get; set; } = default!;

        /// <summary>
        /// Gets or sets some additional metadata used external.
        /// <br/>            
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Metadata> Metadata { get; set; } = default!;

        /// <summary>
        /// Gets or sets some additional parameter used external.
        /// <br/>            
        /// </summary>
        [Newtonsoft.Json.JsonProperty("additionalParameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AllOfdescriptionTypeAdditionalParameters? AdditionalParameters { get; set; } = default!;

        /// <summary>
        /// Gets or Sets Version.
        /// <br/>            
        /// </summary>
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Version { get; set; } = default!;

        /// <summary>
        /// Gets or Sets JobControlOptions.
        /// <br/>            
        /// </summary>
        [Newtonsoft.Json.JsonProperty("jobControlOptions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<JobControlOptions> JobControlOptions { get; set; } = default!;

        /// <summary>
        /// Gets or Sets OutputTransmission.
        /// <br/>            
        /// </summary>
        [Newtonsoft.Json.JsonProperty("outputTransmission", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<TransmissionMode> OutputTransmission { get; set; } = default!;

        /// <summary>
        /// Gets or Sets Links.
        /// <br/>            
        /// </summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Link> Links { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }
        public static ProcessSummary FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProcessSummary>(data, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Metadata
    {
        /// <summary>
        /// Gets or Sets Title.
        /// <br/>            
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Title { get; set; } = default!;

        /// <summary>
        /// Gets or Sets Role.
        /// <br/>            
        /// </summary>
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Role { get; set; } = default!;

        /// <summary>
        /// Gets or Sets Href.
        /// <br/>            
        /// </summary>
        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Href { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }
        public static Metadata FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Metadata>(data, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AllOfdescriptionTypeAdditionalParameters : Metadata
    {
        /// <summary>
        /// Gets or Sets Parameters.
        /// <br/>            
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AdditionalParameter> Parameters { get; set; } = default!;

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }
        public static AllOfdescriptionTypeAdditionalParameters FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AllOfdescriptionTypeAdditionalParameters>(data, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalParameter
    {
        /// <summary>
        /// Gets or Sets Name.
        /// <br/>            
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Gets or Sets Value.
        /// <br/>            
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<object> Value { get; set; } = new System.Collections.ObjectModel.Collection<object>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }
        public static AdditionalParameter FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AdditionalParameter>(data, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }

    }

    /// <summary>
    /// The kind, how the process shall be executed,
    /// <br/>processing completely in blocking mode
    /// <br/>or async in background.
    /// <br/>            
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum JobControlOptions
    {

        [System.Runtime.Serialization.EnumMember(Value = @"sync-execute")]
        SynchronousExecution = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"async-execute")]
        AsyncExecution = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"dismiss")]
        Dismiss = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProcessDescription : ProcessSummary
    {
        /// <summary>
        /// All inputs of this process.
        /// <br/>            
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inputs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, InputDescription> Inputs { get; set; } = default!;

        /// <summary>
        /// All outputs of this process.
        /// <br/>            
        /// </summary>
        [Newtonsoft.Json.JsonProperty("outputs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, OutputDescription> Outputs { get; set; } = default!;

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }
        public static ProcessDescription FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProcessDescription>(data, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DescriptionType
    {
        /// <summary>
        /// A title to display.
        /// <br/>            
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Title { get; set; } = default!;

        /// <summary>
        /// An optional description of this element to present.
        /// <br/>            
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// A list of special keywords.
        /// <br/>            
        /// </summary>
        [Newtonsoft.Json.JsonProperty("keywords", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Keywords { get; set; } = default!;

        /// <summary>
        /// Gets or sets some additional metadata used external.
        /// <br/>            
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Metadata> Metadata { get; set; } = default!;

        /// <summary>
        /// Gets or sets some additional parameter used external.
        /// <br/>            
        /// </summary>
        [Newtonsoft.Json.JsonProperty("additionalParameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AllOfdescriptionTypeAdditionalParameters? AdditionalParameters { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }
        public static DescriptionType FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DescriptionType>(data, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Envelope
    {
        [Newtonsoft.Json.JsonProperty("isNull", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsNull { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Width { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Height { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("diameter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Diameter { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("minX", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double MinX { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("maxX", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double MaxX { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("minY", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double MinY { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("maxY", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double MaxY { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("area", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Area { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("minExtent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double MinExtent { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("maxExtent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double MaxExtent { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("centre", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Coordinate? Centre { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }
        public static Envelope FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Envelope>(data, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Coordinate
    {
        [Newtonsoft.Json.JsonProperty("x", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double X { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("y", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Y { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("z", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Z { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("m", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double M { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("coordinateValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Coordinate? CoordinateValue { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isValid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsValid { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }
        public static Coordinate FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Coordinate>(data, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class IFeature
    {
        [Newtonsoft.Json.JsonProperty("geometry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Geometry? Geometry { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("boundingBox", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Envelope? BoundingBox { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IAttributesTable? Attributes { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }
        public static IFeature FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IFeature>(data, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class Geometry
    {
        [Newtonsoft.Json.JsonProperty("factory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeometryFactory? Factory { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("userData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object? UserData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("srid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Srid { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("precisionModel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PrecisionModel? PrecisionModel { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("numGeometries", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int NumGeometries { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isSimple", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsSimple { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isValid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsValid { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("area", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Area { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Length { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("centroid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Point? Centroid { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("interiorPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Point? InteriorPoint { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pointOnSurface", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Point? PointOnSurface { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("envelope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Geometry? Envelope { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("envelopeInternal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Envelope? EnvelopeInternal { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isRectangle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsRectangle { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }
        public static Geometry FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Geometry>(data, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GeometryFactory
    {
        [Newtonsoft.Json.JsonProperty("precisionModel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PrecisionModel? PrecisionModel { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("coordinateSequenceFactory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CoordinateSequenceFactory? CoordinateSequenceFactory { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("srid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Srid { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("geometryServices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NtsGeometryServices? GeometryServices { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }
        public static GeometryFactory FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeometryFactory>(data, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PrecisionModel
    {
        [Newtonsoft.Json.JsonProperty("isFloating", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsFloating { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("maximumSignificantDigits", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaximumSignificantDigits { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("scale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Scale { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gridSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double GridSize { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("precisionModelType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PrecisionModels PrecisionModelType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }
        public static PrecisionModel FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PrecisionModel>(data, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PrecisionModels
    {

        Floating = 0,

        FloatingSingle = 1,

        Fixed = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class CoordinateSequenceFactory
    {
        [Newtonsoft.Json.JsonProperty("ordinates", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ordinates Ordinates { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }
        public static CoordinateSequenceFactory FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CoordinateSequenceFactory>(data, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [System.Flags]
    public enum Ordinates
    {

        None = 0,

        X = 1,

        Spatial1 = 1,

        Y = 2,

        Spatial2 = 2,

        XY = 3,

        Z = 4,

        Spatial3 = 4,

        XYZ = 7,

        Spatial4 = 8,

        Spatial5 = 16,

        Spatial6 = 32,

        Spatial7 = 64,

        Spatial8 = 128,

        Spatial9 = 256,

        Spatial10 = 512,

        Spatial11 = 1024,

        Spatial12 = 2048,

        Spatial13 = 4096,

        Spatial14 = 8192,

        Spatial15 = 16384,

        Spatial16 = 32768,

        AllSpatialOrdinates = 65535,

        M = 65536,

        Measure1 = 65536,

        XYM = 65539,

        XYZM = 65543,

        Measure2 = 131072,

        Measure3 = 262144,

        Measure4 = 524288,

        Measure5 = 1048576,

        Measure6 = 2097152,

        Measure7 = 4194304,

        Measure8 = 8388608,

        Measure9 = 16777216,

        Measure10 = 33554432,

        Measure11 = 67108864,

        Measure12 = 134217728,

        Measure13 = 268435456,

        Measure14 = 536870912,

        Measure15 = 1073741824,

        Measure16 = -2147483648,

        AllMeasureOrdinates = -65536,

        AllOrdinates = -1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NtsGeometryServices
    {
        [Newtonsoft.Json.JsonProperty("geometryOverlay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeometryOverlay? GeometryOverlay { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("coordinateEqualityComparer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CoordinateEqualityComparer? CoordinateEqualityComparer { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("defaultSRID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DefaultSRID { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("defaultCoordinateSequenceFactory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CoordinateSequenceFactory? DefaultCoordinateSequenceFactory { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("defaultPrecisionModel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PrecisionModel? DefaultPrecisionModel { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }
        public static NtsGeometryServices FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NtsGeometryServices>(data, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class GeometryOverlay
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }
        public static GeometryOverlay FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeometryOverlay>(data, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CoordinateEqualityComparer : EqualityComparerOfCoordinate
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }
        public static CoordinateEqualityComparer FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CoordinateEqualityComparer>(data, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class EqualityComparerOfCoordinate
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }
        public static EqualityComparerOfCoordinate FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EqualityComparerOfCoordinate>(data, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Point : Geometry
    {
        [Newtonsoft.Json.JsonProperty("coordinateSequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CoordinateSequence? CoordinateSequence { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("coordinates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Coordinate>? Coordinates { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("numPoints", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int NumPoints { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isEmpty", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsEmpty { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("dimension", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Dimension Dimension { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("boundaryDimension", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Dimension BoundaryDimension { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("x", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double X { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("y", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Y { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("coordinate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Coordinate? Coordinate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("geometryType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? GeometryType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ogcGeometryType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OgcGeometryType OgcGeometryType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("boundary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Geometry? Boundary { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("z", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Z { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("m", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double M { get; set; } = default!;

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }
        public static Point FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Point>(data, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class CoordinateSequence
    {
        [Newtonsoft.Json.JsonProperty("dimension", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Dimension { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("measures", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Measures { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("spatial", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Spatial { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ordinates", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ordinates Ordinates { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hasZ", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasZ { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hasM", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasM { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("zOrdinateIndex", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ZOrdinateIndex { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("mOrdinateIndex", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MOrdinateIndex { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("first", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Coordinate? First { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("last", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Coordinate? Last { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Count { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }
        public static CoordinateSequence FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CoordinateSequence>(data, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Dimension
    {

        Point = 0,

        P = 0,

        Curve = 1,

        L = 1,

        Surface = 2,

        A = 2,

        Collapse = 3,

        Dontcare = -3,

        True = -2,

        False = -1,

        Unknown = -1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OgcGeometryType
    {

        Point = 1,

        LineString = 2,

        Polygon = 3,

        MultiPoint = 4,

        MultiLineString = 5,

        MultiPolygon = 6,

        GeometryCollection = 7,

        CircularString = 8,

        CompoundCurve = 9,

        CurvePolygon = 10,

        MultiCurve = 11,

        MultiSurface = 12,

        Curve = 13,

        Surface = 14,

        PolyhedralSurface = 15,

        TIN = 16,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class IAttributesTable
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Count { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }
        public static IAttributesTable FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IAttributesTable>(data, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Output
    {
        /// <summary>
        /// Gets or Sets Format.
        /// <br/>            
        /// </summary>
        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Format? Format { get; set; } = default!;

        /// <summary>
        /// Gets or Sets TransmissionMode.
        /// <br/>            
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transmissionMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransmissionMode? TransmissionMode { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }
        public static Output FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Output>(data, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }

    }

    /// <summary>
    /// Gets or Sets Response.
    /// <br/>            
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ResponseKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"raw")]
        RawEnum = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"document")]
        DocumentEnum = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous
    {
        [Newtonsoft.Json.JsonProperty("BoundingBox", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Envelope? BoundingBox { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }
        public static Anonymous FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous>(data, CustomJsonSerializerSettings(new Newtonsoft.Json.JsonSerializerSettings {  }));

        }

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string? Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception? innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception? innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604